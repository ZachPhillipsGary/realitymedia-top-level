window.addEventListener('load', (event) => {
    // keeps this script from being loaded more than once
    if (window.SSObundleDeployed && window.SSObundleDeployed === 1) {
        return
    }
    window.SSObundleDeployed = 1;
    const SSO_URL = "{{{COGNITO_BASE_URL}}}&redirect_uri={{{REDIRECT_URL}}}/signin".replace(/&amp;/g, '&')
    console.log(SSO_URL)
    // inject Google SSO metadata for Google client script
    const createGoogleLink = () => {
        const googleMetaName = "google-signin-client_id";

        const exists = document.querySelector(`input[name="${googleMetaName}"]`);
        if (exists) {
            return exists
        }
        const googleMeta = document.createElement('meta');
        googleMeta.name = googleMetaName
        googleMeta.content = "{{GOOGLE_SSO_ID}}"
        console.log("{{GOOGLE_SSO_ID}}")
        document.head.appendChild(googleMeta)
        return googleMeta
    }
    // Create a link to launch the SSO flow
    const createSSOLink = () => {
        const SSOLink = document.createElement('a');
        SSOLink.href = SSO_URL
        SSOLink.textContent = "Sign in with Google"
        document.body.appendChild(SSOLink);
    }
    const init = () => {
        try {
            window.initSSO()
        } catch (error) {
            console.log(error)
            setTimeout(init, 100)
        }
    }
    try {
        window.SSOSocketURL = "{{PROTOCOL}}{{BASE_URL}}"
        const scripts = ["{{PROTOCOL}}{{BASE_URL}}/socket.io/socket.io.js", "https://apis.google.com/js/platform.js",
            "{{PROTOCOL}}{{BASE_URL}}/scripts.js"
        ];

        scripts.forEach(script => {
            const scriptElm = document.createElement('script');
            scriptElm.src = script;
            document.body.appendChild(scriptElm);
        });

        // if we don't have token, attempt login
        if (window.location.href.indexOf("access_token") == -1) {
            const signin = confirm("Sign in?");
            if (signin == true) {
                window.location.href = SSO_URL
            }
        } else if (Object.keys(window).includes("HUBS_SSO")) {
            createGoogleLink()
            let waitTime = 0;
            if (!Object.keys(window).includes("HUBS_SSO")) {
                waitTime = 300
            }
            setTimeout(init, waitTime)
        }
    } catch (error) {
        console.log("Error", error)
    }
});